#56 Python Tutorial for Beginners | Constructor in Inheritance					https://www.youtube.com/watch?v=6P-P879BcHQ&list=PLsyeobzWxl7poL9JTVyndKe62ieoN-MZ3&index=60
  -------------------------------

Constructor in inheritance
##super().__init__() in child class
MethodResolution Oredr (MRO)
##class C(A,B): A gets preference
 --------------------------------------------
  +++++++++++++++++++++++++++++++++++++++++++++++
class A:
    def __init__(self):
        print("class A-init")
    def feature1(self):
        print("class A - Feature 1 working")

    def feature2(self):
        print("class A - Feature 2 working")

class B(A):
    #def __init__(self):
    #    print("class B-init")

    def feature3(self):
        print("class B - Feature 3 working")

    def feature4(self):
        print("class B - Feature 4 working")


print("-----------A below--------")
a1=A()
a1.feature1()
a1.feature2()
print("-----------B below--------")
b1=B()
b1.feature3()
b1.feature4()
print("---------------------------")
 -------------------------
  -----------A below--------
class A-init
class A - Feature 1 working
class A - Feature 2 working
  -----------B below--------
class A-init
class B - Feature 3 working
class B - Feature 4 working
  ---------------------------

  ++++++++++++++++++++++++++++++++++++++++++++++++

class A:
    def __init__(self):
        print("class A-init")
    def feature1(self):
        print("class A - Feature 1 working")

    def feature2(self):
        print("class A - Feature 2 working")

class B(A):
    def __init__(self):
        print("class B-init")

    def feature3(self):
        print("class B - Feature 3 working")

    def feature4(self):
        print("class B - Feature 4 working")


print("-----------A below--------")
a1=A()
a1.feature1()
a1.feature2()
print("-----------B below--------")
b1=B()
b1.feature3()
b1.feature4()
print("---------------------------")
  --------------------
  -----------A below--------
class A-init
class A - Feature 1 working
class A - Feature 2 working
  -----------B below--------
class B-init
class B - Feature 3 working
class B - Feature 4 working
  ---------------------------
  +++++++++++++++++++++++++++++++++++
class A:
    def __init__(self):
        print("class A-init")
    def feature1(self):
        print("class A - Feature 1 working")

    def feature2(self):
        print("class A - Feature 2 working")

class B(A):
    def __init__(self):
        print("class B-init")
        super().__init__()

    def feature3(self):
        print("class B - Feature 3 working")

    def feature4(self):
        print("class B - Feature 4 working")


print("-----------A below--------")
a1=A()
a1.feature1()
a1.feature2()
print("-----------B below--------")
b1=B()
b1.feature3()
b1.feature4()
print("---------------------------")
  --------------------
  -----------A below--------
class A-init
class A - Feature 1 working
class A - Feature 2 working
  -----------B below--------
class B-init
class A-init
class B - Feature 3 working
class B - Feature 4 working
  ---------------------------
  +++++++++++++++MethodResolution Oredr (MRO) below++++++++++++++++
##class C(A,B): A gets preference

class A:
    def __init__(self):
        print("class A-init")
    def feature1(self):
        print("class A - Feature 1 working")

    def feature2(self):
        print("class A - Feature 2 working")

class B():
    def __init__(self):
        print("class B-init")

    def feature3(self):
        print("class B - Feature 3 working")

    def feature4(self):
        print("class B - Feature 4 working")


class C(A,B):
    def __init__(self):
        print("class C-init")
        super().__init__()

    def feature3(self):
        print("class C - Feature 3 working")

class D(B,A):
    def __init__(self):
        print("class D-init")
        super().__init__()

    def feature3(self):
        print("class D - Feature 3 working")

print(" -----------A below--------")
a1=A()
print(" -----------B below--------")
b1=B()
print(" -----------C below--------")
c1=C()
print(" -----------D below--------")
d1=D()
print(" ---------------------------")
  -----------------------
 -----------A below--------
class A-init
 -----------B below--------
class B-init
 -----------C below--------
class C-init
class A-init
 -----------D below--------
class D-init
class B-init
 ---------------------------
  ++++++++++++++++++++++++++++++++++++++

class A:
    def __init__(self):
        print("class A-init")

    def feature_common(self):
        print("class A - Feature common working")

    def feature1(self):
        print("class A - Feature 1 working")

    def feature2(self):
        print("class A - Feature 2 working")

class B():
    def __init__(self):
        print("class B-init")

    def feature_common(self):
        print("class B - Feature common working")

    def feature3(self):
        print("class B - Feature 3 working")

    def feature4(self):
        print("class B - Feature 4 working")


class C(A,B):
    def __init__(self):
        print("class C-init")
        super().__init__()

    def feature3(self):
        print("class C - Feature 3 working")

class D(B,A):
    def __init__(self):
        print("class D-init")
        super().__init__()

    def feature3(self):
        print("class D - Feature 3 working")

print(" -----------A below--------")
a1=A()
print(" -----------B below--------")
b1=B()
print(" -----------C below--------")
c1=C()
c1.feature_common()
print(" -----------D below--------")
d1=D()
d1.feature_common()
print(" ---------------------------")
  -----------------------------
 -----------A below--------
class A-init
 -----------B below--------
class B-init
 -----------C below--------
class C-init
class A-init
class A - Feature common working
 -----------D below--------
class D-init
class B-init
class B - Feature common working
 ---------------------------
  +++++++++++++++++++++++++++++++++++++++++++++++++

class A:
    def __init__(self):
        print("class A-init")

    def feature_common(self):
        print("class A - Feature common working")

    def feature1(self):
        print("class A - Feature 1 working")

    def feature2(self):
        print("class A - Feature 2 working")

class B():
    def __init__(self):
        print("class B-init")

    def feature_common(self):
        print("class B - Feature common working")

    def feature3(self):
        print("class B - Feature 3 working")

    def feature4(self):
        print("class B - Feature 4 working")


class C(A,B):
    def __init__(self):
        print("class C-init")
        super().__init__()

    def feature3(self):
        print("class C - Feature 3 working")
    def feature_common(self):
        super().feature_common()
        print("class C - Feature common working")



class D(B,A):
    def __init__(self):
        print("class D-init")
        super().__init__()

    def feature3(self):
        print("class D - Feature 3 working")
    def feature_common(self):
        super().feature_common()
        print("class D - Feature common working")


print(" -----------A below--------")
a1=A()
a1.feature_common()
print(" -----------B below--------")
b1=B()
b1.feature_common()
print(" -----------C below--------")
c1=C()
c1.feature_common()
print(" -----------D below--------")
d1=D()
d1.feature_common()
print(" ---------------------------")
  ------------------------------
 -----------A below--------
class A-init
class A - Feature common working
 -----------B below--------
class B-init
class B - Feature common working
 -----------C below--------
class C-init
class A-init
class A - Feature common working
class C - Feature common working
 -----------D below--------
class D-init
class B-init
class B - Feature common working
class D - Feature common working
 ---------------------------
  ++++++++++++++++++++++++++++++++++++

class A:
    def __init__(self,p1,p2):
        self.p1=p1
        self.p2=p2
        print(f"class A-init: {self.p1}-{self.p2}")
    def f(self):
        print(f"Master - A: {self.p1} ** {self.p2}")

class B(A):
    def __init__(self,p1,p2):
        self.p1=p1
        self.p2=p2
        print(f"class B-init: {self.p1}-{self.p2}")
        #sp1=super().p1
        #sp2=super().p2
        super(B, self).__init__(p1,p2)
    def f(self):
        print(f"Child - B: {self.p1} ** {self.p2}")
        super().f()

x1=A(10,20)
print('  ----------------------')
x2=B(100,200)
print('  ----------++++++method below+++++++++------------')
print(x1.f())
print('  ----------------------')
print(x2.f())
print('  ----------+++++++++++++++------------')

  -----------------
class A-init: 10-20
  ----------------------
class B-init: 100-200
class A-init: 100-200
  ----------++++++method below+++++++++------------
Master - A: 10 ** 20
None
  ----------------------
Child - B: 100 ** 200
Master - A: 100 ** 200
None
  ----------+++++++++++++++------------
  ++++++++++++++++++++++++++++++++++++++++++++
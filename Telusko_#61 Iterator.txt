#61 Python Tutorial for Beginners | Iterator					
https://www.youtube.com/watch?v=Dyu08G2l71c&list=PLsyeobzWxl7poL9JTVyndKe62ieoN-MZ3&index=66
https://docs.python.org/3/tutorial/classes.html
  -------------------------------
"__next__()" gives the next value...(that you need in while loop)
you need an iterator or array in for loop
  ----------------------------------------
print("-------1-------")
nums=[7,8,9,5]
print(nums)
print("-------2-------")
for i in nums:
    print(f"i={i}")
print("-------3-------")
it=iter(nums)
print(it)
print("-------4-------")
print(it.__iter__())
print("-------5-------")
print(it.__next__())
print("-------6-------")
print(next(it))
print("-------7-------")
  ------------
  -------1-------
[7, 8, 9, 5]
  -------2-------
i=7
i=8
i=9
i=5
  -------3-------
<list_iterator object at 0x0000020678B23808>
  -------4-------
<list_iterator object at 0x0000020678B23808>
  -------5-------
7
  -------6-------
8
  -------7-------
 -------------------------
 +++++++++++++++++++
nums=[7,8,9,5]
for j in iter(nums):
    print(f"j={j}")
 --------------------
j=7
j=8
j=9
j=5
  ++++++++++++++++++++++++
class TopTen:

    def __init__(self,num):
        self.num = num


    def mtopten(self):
        iter1=[0]
        cnt=0
        while cnt <= self.num:
            print(f"cnt={cnt}")
            cnt=cnt+1
            iter1.append(cnt)
        return iter1

x=TopTen(10)
print(x.mtopten())
  ------------------------
cnt=0
cnt=1
cnt=2
cnt=3
cnt=4
cnt=5
cnt=6
cnt=7
cnt=8
cnt=9
cnt=10
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
  +++++++++++++++++++++++++++++++
 class TopTen:

    def __init__(self,limit):
        self.num = 1
        self.limit=limit

    def __iter__(self):
        return self

    def __next__(self):
        if self.num <= self.limit:
            val=self.num
            self.num +=1
            return val
        else:
            raise StopIteration

print(" --------for loop below-------------")
n=10
values=TopTen(n)
print(f"values:{values}")
print(f"values:{values.__iter__()}")
print(f"values:{values.__next__()}")
for i in values:
    print(f'i={i}')
print(" --------while loop below-------------")

n=10
values2=TopTen(n)
print(f"values2:{values}")
print(f"values2:{values.__iter__()}")

j=values2.__next__()
while j <= n:
      print(f"j={j}")
      j=values2.__next__()
  --------------------
 --------for loop below-------------
values:<__main__.TopTen object at 0x000001D5BEAC3B88>
values:<__main__.TopTen object at 0x000001D5BEAC3B88>
values:1
i=2
i=3
i=4
i=5
i=6
i=7
i=8
i=9
i=10
 --------while loop below-------------
values2:<__main__.TopTen object at 0x000001D5BEAC3B88>
values2:<__main__.TopTen object at 0x000001D5BEAC3B88>
j=1
j=2
j=3
j=4
j=5
j=6
j=7
j=8
j=9
j=10
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/Telusko_gen_002.py", line 36, in <module>
    j=values2.__next__()
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/Telusko_gen_002.py", line 16, in __next__
    raise StopIteration
StopIteration
 ++++++++++++++++++++++++++++++++++++++
class TopTen:

    def __init__(self,limit):
        self.num = 1
        self.limit=limit

    #def __iter__(self):
     #  return self

    def __next__(self):
        if self.num <= self.limit:
            val=self.num
            self.num +=1
            return val
        else:
            raise StopIteration

n=10
values=TopTen(n)
print(f"values:{values}")
print(f"values:{values.__iter__()}")
print(f"values:{values.__next__()}")
for i in values:
    print(f'i={i}')
 ------------------------------------
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/gen.py", line 21, in <module>
    print(f"values:{values.__iter__()}")
AttributeError: 'TopTen' object has no attribute '__iter__'
values:<__main__.TopTen object at 0x0000019108303908>
  +++++++++++++++++++++++++++++++++++
class TopTen:

    def __init__(self,limit):
        self.num = 1
        self.limit=limit

    #def __iter__(self):
    #   return self

    def __next__(self):
        if self.num <= self.limit:
            val=self.num
            self.num +=1
            return val
        else:
            raise StopIteration

print(" --------for loop below-------------")
n=10
values=TopTen(n)
print(f"values:{values}")
print(f"values:{values.__iter__()}")
print(f"values:{values.__next__()}")
for i in values:
    print(f'i={i}')
print(" --------while loop below-------------")

n=10
values2=TopTen(n)
print(f"values2:{values}")
print(f"values2:{values.__iter__()}")

j=values2.__next__()
while j <= n:
      print(f"j={j}")
      j=values2.__next__()

  --------------------------------
 --------for loop below-------------
values:<__main__.TopTen object at 0x000001DE7B593B48>
values:<__main__.TopTen object at 0x000001DE7B593B48>
values:1
i=2
i=3
i=4
i=5
i=6
i=7
i=8
i=9
i=10
 --------while loop below-------------
values2:<__main__.TopTen object at 0x000001DE7B593B48>
values2:<__main__.TopTen object at 0x000001DE7B593B48>
j=1
j=2
j=3
j=4
j=5
j=6
j=7
j=8
j=9
j=10
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/Telusko_gen_001.py", line 36, in <module>
    j=values2.__next__()
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/Telusko_gen_001.py", line 16, in __next__
    raise StopIteration
StopIteration
  +++++++++++++++++++++++++++++++++++++++++

class TopTen:

    def __init__(self,limit):
        self.num = 1
        self.limit=limit

    def __iter__(self):
        return self

    def __next__(self):
        if self.num <= self.limit:
            val=self.num
            self.num +=1
            return val
        else:
            raise StopIteration


n=10
values2=TopTen(n)
print(f"values2:{values2}")
print(f"values2:{values2.__iter__()}")

j=values2.__next__()
while j < (n):
      print(f"j={j}")
      j=values2.__next__()
  ---------------------------------

  +++++++++++++++++++++++++++++++++++++++++++++++++++++

print('----------for element in [1, 2, 3]------------')
for element in [1, 2, 3]:
    print(element)
print('----------for element in (1, 2, 3):------------')
for element in (1, 2, 3):
    print(element)
print('----------for key in {one:1, two:2}:------------')
for key in {'one':1, 'two':2}:
    print(key)
print('----------for char in "123":------------')
for char in "123":
    print(char)
  -------------------------
----------for element in [1, 2, 3]------------
1
2
3
----------for element in (1, 2, 3):------------
1
2
3
----------for key in {one:1, two:2}:------------
one
two
----------for char in "123":------------
1
2
3
  +++++++++++++++++++++++++++++++++++++++++
https://docs.python.org/3/tutorial/classes.html
  ------------------------
class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def __next__(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]

m='spam'
a=Reverse(m)
print(f"a.date= {a.data} a.index= {a.index}")
for i in a: ############or iter(a)
    print(f"i= {i} i.index= {i.index(i)}")
 ---------------------------------------
a.date= spam a.index= 4
i= m i.index= 0
i= a i.index= 0
i= p i.index= 0
i= s i.index= 0
 +++++++++++++++++++++++++++++++++++++=
class Reverse:
    """Iterator for looping over a sequence backwards."""
    def __init__(self, data):
        self.data = data
        self.index = len(data)
    def __iter__(self):
        return self
    def __next__(self):
        if self.index == 0:
            raise StopIteration
        self.index = self.index - 1
        return self.data[self.index]

m='spam'
a=Reverse(m)
print(f"a.date= {a.data} a.index= {a.index}")

i=0
while i < a.index:
      #i = i + 1
      print(f"i= {i} : a.__next__()= {a.__next__()}")

 ------------------------------------------
a.date= spam a.index= 4
i= 0 : a.__next__()= m
i= 0 : a.__next__()= a
i= 0 : a.__next__()= p
i= 0 : a.__next__()= s
 ++++++++++++++++++++++++++++++++++++++++++++++++++++


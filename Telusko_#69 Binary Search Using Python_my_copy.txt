#69 Python Tutorial for Beginners | Binary Search Using Python					https://www.youtube.com/watch?v=DE-ye0t0oxE&list=PLsyeobzWxl7poL9JTVyndKe62ieoN-MZ3&index=74
  ------------------------------  

  ==========================below by telusko =======================
pos = -1
def search(list,n):
    l=0
    u=len(list)-1

    while l <=u:
        mid=(l+u) //2
        if list[mid]==n:
            globals()['pos']=mid
            return True
        else:
            if list[mid] < n:
                l=mid+1
            else:
                u=mid-1
    return False

list=[4,7,8,12,45,99,102,702,10987,56666]
n=12

if search(list,n):
    print("Found at ",pos+1)
else:
    print("Not Found")
 -----------------------------------------
Found at  4
  ==========================above by telusko =======================

  ==========================below by telusko  modified by me  remove global var =======================
#pos = -1
def search(list,n):
    l=0
    u=len(list)-1

    while l <=u:
        mid=(l+u) //2
        if list[mid]==n:
            #globals()['pos']=mid
            return mid
        else:
            if list[mid] < n:
                l=mid+1
            else:
                u=mid-1
    return 0

list=[4,7,8,12,45,99,102,702,10987,56666]
n=12

a=search(list,n)
if a != 0 :
    print("Found at ",a+1)
else:
    print("Not Found")

  ==========================above by telusko  modified by me  remove global var =======================
  =======================================below is correct useing wrap function outside core funct for global variable =========================
def wrap_binr_srch(srch,arr):
    inter_low=0
    inter_upp=len(arr)
    #srch = 29
    #arr = [5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27, 28]
    glow=0
    gupp=len(arr)
    cnt=1

    def print_vals(tag,cnt,srch,low,upp,mid0,amid0,midl,amidl,midr,amidr,arr):
        print(f"low={low} , upp={upp}")
        print(f"deb-{tag}:cnt={cnt}: srch={srch}, low={low},upp={upp},mid0={mid0}, midl={midl}, midr={midr}, len(arr)={len(arr)} arr={arr}")
        if (low < 0 or low >= len(arr)+1) or  (upp < 0 or upp >= len(arr)+1):
            print(f"deb-if: srch={srch}, arr[low]=xxxx,arr[upp-1]=xxx,,arr[mid0] ={amid0}, arr[midl]={amidl}, arr[mid2]={amidr}\n")
        else:
            print(f"deb-else: srch={srch}, arr[low]={arr[low]},arr[upp-1]= {arr[upp - 1]},arr[mid0] ={amid0}, arr[midl]={amidl}, arr[midr]={amidr}\n")

    def checkl(low,upp):
        if (low >= 0 or low <= len(arr)-1) or (upp >= 0 or low <= len(upp)-1) :
            return True
        else :
            print("need break")
            return False
    def check_gupp_glow_eq_2 (low,up):
        if abs(upp-low)==2:
                return True

    def binr_srch(srch,low,upp,arr):

        nonlocal glow
        nonlocal gupp
        nonlocal cnt
        print(" ===================================================================")
        if (glow >=0 or glow <= len(arr)-1) or (gupp >=0 or gupp <= len(arr)-1):
            print(f"start-glow={glow} gupp={gupp} arr[glow]={arr[glow]} arr[gupp-1]={arr[gupp-1]}")
        else:
            print(f"start-glow={glow} gupp={gupp} arr[glow]=xxxx arr[gupp-1]=xxxx")

        while glow >= 0 or gupp < len(arr):
            cnt=cnt+1
            if not checkl(glow, gupp):
                break
            if (gupp-glow)%2 == 1:
                mid0 = int((gupp - glow) / 2)
                imid0=glow+mid0

                if abs(upp - low) == 2 and (arr[imid0] != srch) or ((upp==low) and (arr[imid0] != srch)):
                    print(f"mid0=srch-0::srch: {srch} not in {arr}")
                    break
                if (upp==(low+1)) and (arr[imid0] != srch):
                    print(f"mid0=srch-0::srch: {srch} not in {arr}")
                    break

                if arr[imid0] == srch:
                    print(f"got {srch} : 1 at {mid0}")
                    print_vals("mid0=srch-00",cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                    break
                elif arr[imid0] < srch:
                    print_vals("srch>mid0-A", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                    glow=glow+mid0
                    gupp=gupp
                    low=glow
                    upp=gupp
                    if upp-low==2:
                        if arr[int((upp+low)/2)]==srch:
                            print (f"got {srch} AA: at {int((upp+low)/2)}")
                            break
                        else:
                            print(f"srch={srch} is not in {arr}")
                            break
                    print_vals("srch>mid0-B", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                    binr_srch(srch, low, upp, arr)
                else:
                    print_vals("mid0<srch-C", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                    glow = glow
                    gupp = gupp - mid0 - 0
                    low=glow
                    upp=gupp
                    print_vals("mid0<srch-D", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                    binr_srch(srch, low, upp, arr)
            else:
                midl=int((gupp-glow)/2)-1
                midr=int((gupp-glow)/2)
                print(f"midl={midl} midr={midr}")
                imidl=glow+midl
                imidr=glow + midr
                if abs(upp - low) == 2 and (arr[imidl] != srch and arr[imidr] != srch):
                    print(f"midl&r =srch-0A::srch: {srch} not in {arr}")
                    break
                if (arr[imidl] != srch or arr[imidr] != srch) and ((upp==(low+1))):
                    print(f"midl&r =srch-0B::srch: {srch} not in {arr}")
                    break

                if (srch==arr[imidl]) or srch==arr[imidr]:
                    if srch==arr[imidl] :
                        print(f"got {srch} at: {imidl}")
                        print_vals("midl&r =srch-00", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                        break
                    elif srch==arr[imidr]:
                        print(f"got {srch} at:  {imidr}")
                        print_vals("midl&r =srch-00", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                        break
                elif srch > arr[imidr]:
                    print_vals("srch>midr-A", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    glow = glow + midr + 0
                    gupp=gupp
                    low = glow
                    upp = gupp
                    print_vals("srch>midr-B", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    binr_srch(srch, low, upp, arr)
                else:
                    print_vals("midl<srch-C", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    print(f"(abs(upp - low):{abs(upp-low)} arr[imidl]={arr[imidl]} arr[imidr]={arr[imidr]}")
                    gupp = gupp - midl - 0
                    glow=glow
                    low = glow
                    upp = gupp
                    print_vals("midl<srch-D", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    binr_srch(srch, low, upp, arr)
            if gupp< glow:
                print("get out")
                break


    binr_srch(srch, inter_low, inter_upp, arr)


srch=29
arr=[5, 7,  9, 11, 13,14, 16, 18,20,22,23, 25, 27,28]
wrap_binr_srch(srch,arr)

  =======================================above is correct useing wrap function outside core funct for global variable =========================

  ========================================below is correct without comment use global var in module outside funct ===================================

glow=0
gupp=14
cnt=1
def print_vals(tag,cnt,srch,low,upp,mid0,amid0,midl,amidl,midr,amidr,arr):
    print(f"low={low} , upp={upp}")
    print(f"deb-{tag}:cnt={cnt}: srch={srch}, low={low},upp={upp},mid0={mid0}, midl={midl}, midr={midr}, len(arr)={len(arr)} arr={arr}")
    if (low < 0 or low >= len(arr)+1) or  (upp < 0 or upp >= len(arr)+1):
        print(f"deb-if: srch={srch}, arr[low]=xxxx,arr[upp-1]=xxx,,arr[mid0] ={amid0}, arr[midl]={amidl}, arr[mid2]={amidr}\n")
    else:
        print(f"deb-else: srch={srch}, arr[low]={arr[low]},arr[upp-1]= {arr[upp - 1]},arr[mid0] ={amid0}, arr[midl]={amidl}, arr[midr]={amidr}\n")

def checkl(low,upp):
    if (low >= 0 or low <= len(arr)-1) or (upp >= 0 or low <= len(upp)-1) :
        return True
    else :
        print("need break")
        return False
def check_gupp_glow_eq_2 (low,up):
    if abs(upp-low)==2:
            return True

def binr_srch(srch,low,upp,arr):

    global glow
    global gupp
    global cnt
    print(" ===================================================================")
    if (glow >=0 or glow <= len(arr)-1) or (gupp >=0 or gupp <= len(arr)-1):
        print(f"start-glow={glow} gupp={gupp} arr[glow]={arr[glow]} arr[gupp-1]={arr[gupp-1]}")
    else:
        print(f"start-glow={glow} gupp={gupp} arr[glow]=xxxx arr[gupp-1]=xxxx")

    while glow >= 0 or gupp < len(arr):
        cnt=cnt+1
        if not checkl(glow, gupp):
            break
        if (gupp-glow)%2 == 1:
            mid0 = int((gupp - glow) / 2)
            imid0=glow+mid0

            if abs(upp - low) == 2 and (arr[imid0] != srch) or ((upp==low) and (arr[imid0] != srch)):
                print(f"mid0=srch-0::srch: {srch} not in {arr}")
                break
            if (upp==(low+1)) and (arr[imid0] != srch):
                print(f"mid0=srch-0::srch: {srch} not in {arr}")
                break

            if arr[imid0] == srch:
                print(f"got {srch} : 1 at {mid0}")
                print_vals("mid0=srch-00",cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                break
            elif arr[imid0] < srch:
                print_vals("srch>mid0-A", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                glow=glow+mid0
                gupp=gupp
                low=glow
                upp=gupp
                if upp-low==2:
                    if arr[int((upp+low)/2)]==srch:
                        print (f"got {srch} AA: at {int((upp+low)/2)}")
                        break
                    else:
                        print(f"srch={srch} is not in {arr}")
                        break
                print_vals("srch>mid0-B", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                binr_srch(srch, low, upp, arr)
            else:
                print_vals("mid0<srch-C", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                glow = glow
                gupp = gupp - mid0 - 0
                low=glow
                upp=gupp
                print_vals("mid0<srch-D", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                binr_srch(srch, low, upp, arr)
        else:
            midl=int((gupp-glow)/2)-1
            midr=int((gupp-glow)/2)
            print(f"midl={midl} midr={midr}")
            imidl=glow+midl
            imidr=glow + midr
            if abs(upp - low) == 2 and (arr[imidl] != srch and arr[imidr] != srch):
                print(f"midl&r =srch-0A::srch: {srch} not in {arr}")
                break
            if (arr[imidl] != srch or arr[imidr] != srch) and ((upp==(low+1))):
                print(f"midl&r =srch-0B::srch: {srch} not in {arr}")
                break

            if (srch==arr[imidl]) or srch==arr[imidr]:
                if srch==arr[imidl] :
                    print(f"got {srch} at: {imidl}")
                    print_vals("midl&r =srch-00", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    break
                elif srch==arr[imidr]:
                    print(f"got {srch} at:  {imidr}")
                    print_vals("midl&r =srch-00", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    break
            elif srch > arr[imidr]:
                print_vals("srch>midr-A", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                glow = glow + midr + 0
                gupp=gupp
                low = glow
                upp = gupp
                print_vals("srch>midr-B", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                binr_srch(srch, low, upp, arr)
            else:
                print_vals("midl<srch-C", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                print(f"(abs(upp - low):{abs(upp-low)} arr[imidl]={arr[imidl]} arr[imidr]={arr[imidr]}")
                gupp = gupp - midl - 0
                glow=glow
                low = glow
                upp = gupp
                print_vals("midl<srch-D", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                binr_srch(srch, low, upp, arr)
        if gupp< glow:
            print("get out")
            break



#srch=89
srch=29
#arr=[5, 6, 7, 8, 9, 56, 59,83,87,89,91]
arr=[5, 7,  9, 11, 13,14, 16, 18,20,22,23, 25, 27,28]
low=0
upp=len(arr)
print(upp)
binr_srch(srch,low,upp,arr)


  ========================================above is correct without comment use global var in module outside funct ===================================

  ========================================below is correct with commented row use global var in module outside funct ===================================


glow=0
gupp=14
cnt=1
def print_vals(tag,cnt,srch,low,upp,mid0,amid0,midl,amidl,midr,amidr,arr):
    print(f"low={low} , upp={upp}")
    #print(f"len(arr)={len(arr)}")
    print(f"deb-{tag}:cnt={cnt}: srch={srch}, low={low},upp={upp},mid0={mid0}, midl={midl}, midr={midr}, len(arr)={len(arr)} arr={arr}")
    #print(f"srch={srch}, arr[mid0] ={arr[amid0]}, arr[midl]={arr[midl]}, arr[mid2]={amidr}")
    if (low < 0 or low >= len(arr)+1) or  (upp < 0 or upp >= len(arr)+1):
        #print(f"low={low} , upp={upp}")
        print(f"deb-if: srch={srch}, arr[low]=xxxx,arr[upp-1]=xxx,,arr[mid0] ={amid0}, arr[midl]={amidl}, arr[mid2]={amidr}\n")
    else:
        # print(f"srch={srch}, arr[low]={low},arr[upp-1]= {upp},arr[mid0] ={amid0}, arr[midl]={amidl}, arr[mid2]={amidr}")
        # print(f"srch={srch}, arr[low]=ind:{low},arr[upp-1]=ind={upp-1},arr[mid0] =xxx, arr[midl]={amidl}, arr[mid2]={amidr}\n")
        print(f"deb-else: srch={srch}, arr[low]={arr[low]},arr[upp-1]= {arr[upp - 1]},arr[mid0] ={amid0}, arr[midl]={amidl}, arr[midr]={amidr}\n")

def checkl(low,upp):
    if (low >= 0 or low <= len(arr)-1) or (upp >= 0 or low <= len(upp)-1) :
        return True
    else :
        print("need break")
        return False
def check_gupp_glow_eq_2 (low,up):
    if abs(upp-low)==2:
            return True

def binr_srch(srch,low,upp,arr):

    global glow
    global gupp
    global cnt
    print(" ===================================================================")
    if (glow >=0 or glow <= len(arr)-1) or (gupp >=0 or gupp <= len(arr)-1):
        print(f"start-glow={glow} gupp={gupp} arr[glow]={arr[glow]} arr[gupp-1]={arr[gupp-1]}")
    else:
        print(f"start-glow={glow} gupp={gupp} arr[glow]=xxxx arr[gupp-1]=xxxx")

    #while (gupp-glow) >1 or glow < 0 or gupp > len(arr): #and cnt <= 15:
    while glow >= 0 or gupp < len(arr):  # and cnt <= 15:
        cnt=cnt+1
        if not checkl(glow, gupp):
            break
        if (gupp-glow)%2 == 1:
            mid0 = int((gupp - glow) / 2)
            imid0=glow+mid0

            if abs(upp - low) == 2 and (arr[imid0] != srch) or ((upp==low) and (arr[imid0] != srch)):
                print(f"mid0=srch-0::srch: {srch} not in {arr}")
                break
            if (upp==(low+1)) and (arr[imid0] != srch):
                print(f"mid0=srch-0::srch: {srch} not in {arr}")
                break

            if arr[imid0] == srch:
                print(f"got {srch} : 1 at {mid0}")
                print_vals("mid0=srch-00",cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                break
            elif arr[imid0] < srch:
                print_vals("srch>mid0-A", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                glow=glow+mid0
                gupp=gupp
                low=glow
                upp=gupp
                if upp-low==2:
                    if arr[int((upp+low)/2)]==srch:
                        print (f"got {srch} AA: at {int((upp+low)/2)}")
                        break
                    else:
                        print(f"srch={srch} is not in {arr}")
                        break
                print_vals("srch>mid0-B", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                if not checkl(glow,gupp):
                    break
                binr_srch(srch, low, upp, arr)
            else:
                print_vals("mid0<srch-C", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                glow = glow
                gupp = gupp - mid0 - 0
                low=glow
                upp=gupp
                print_vals("mid0<srch-D", cnt,srch,low,upp,imid0,arr[imid0],999,999,999,999,arr)
                if not checkl(glow,gupp):
                    break
                binr_srch(srch, low, upp, arr)
        else:
            midl=int((gupp-glow)/2)-1
            midr=int((gupp-glow)/2)
            print(f"midl={midl} midr={midr}")
            imidl=glow+midl
            imidr=glow + midr
            if abs(upp - low) == 2 and (arr[imidl] != srch and arr[imidr] != srch):
                print(f"midl&r =srch-0A::srch: {srch} not in {arr}")
                break
            if (arr[imidl] != srch or arr[imidr] != srch) and ((upp==(low+1))):
                print(f"midl&r =srch-0B::srch: {srch} not in {arr}")
                break

            if (srch==arr[imidl]) or srch==arr[imidr]:
                if srch==arr[imidl] :
                    print(f"got {srch} at: {imidl}")
                    print_vals("midl&r =srch-00", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    break
                elif srch==arr[imidr]:
                    print(f"got {srch} at:  {imidr}")
                    print_vals("midl&r =srch-00", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                    break
            elif srch > arr[imidr]:
                print_vals("srch>midr-A", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                glow = glow + midr + 0
                gupp=gupp
                low = glow
                upp = gupp
                print_vals("srch>midr-B", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                if not checkl(glow,gupp):
                    break
                binr_srch(srch, low, upp, arr)
            else:
                print_vals("midl<srch-C", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                print(f"(abs(upp - low):{abs(upp-low)} arr[imidl]={arr[imidl]} arr[imidr]={arr[imidr]}")
                gupp = gupp - midl - 0
                glow=glow
                low = glow
                upp = gupp
                print_vals("midl<srch-D", cnt, srch, low, upp,999,999,imidl,arr[imidl], imidr,arr[imidr], arr)
                if not checkl(glow,gupp):
                    break
                binr_srch(srch, low, upp, arr)
        if gupp< glow:
            print("get out")
            break



#srch=89
srch=29
#arr=[5, 6, 7, 8, 9, 56, 59,83,87,89,91]
arr=[5, 7,  9, 11, 13,14, 16, 18,20,22,23, 25, 27,28]
low=0
upp=len(arr)
print(upp)
binr_srch(srch,low,upp,arr)

  ========================================above is correct with commented row use global var in module outside funct ===================================

  ========================================below is correct OOPS  - sep var/param in func===================================
class class_wrap_binr_srch:
        glow=0
        cnt=1
        gupp = 0

        def __init__(self,srch,arr):
            self.srch=srch
            self.arr=arr
            self.low=0
            self.upp=len(self.arr)
            self.inter_low = 0
            self.inter_upp = len(self.arr)
            class_wrap_binr_srch.gupp =len(arr)
            #self.mid0=0
            #self.amid0=0
            #self.midl=0
            #self.amidl=0
            #elf.midr=0
            #self.amidr=0

        def print_vals(self,tag, cnt, srch, low, upp, mid0, amid0, midl, amidl, midr, amidr, arr):
            print(f"low={self.low} , upp={self.upp}")
            print(f"deb-{tag}:cnt={cnt}: srch={self.srch}, low={self.low},upp={self.upp},mid0={mid0}, midl={midl}, midr={midr}, len(arr)={len(self.arr)} arr={self.arr}")
            if (self.low < 0 or self.low >= len(self.arr) + 1) or (self.upp < 0 or self.upp >= len(self.arr) + 1):
                print(f"deb-if: srch={self.srch}, arr[low]=xxxx,arr[upp-1]=xxx,,arr[mid0] ={amid0}, arr[midl]={amidl}, arr[mid2]={amidr}\n")
            else:
                print(f"deb-else: srch={self.srch}, arr[low]={arr[self.low]},arr[upp-1]= {self.arr[self.upp - 1]},arr[mid0] ={amid0}, arr[midl]={amidl}, arr[midr]={amidr}\n")

        def binr_srch(self,srch, low, upp, arr):
            print(" ===================================================================")
            print(f"class_wrap_binr_srch.glow= {class_wrap_binr_srch.glow} class_wrap_binr_srch.gupp = {class_wrap_binr_srch.gupp} cnt={class_wrap_binr_srch.cnt}")
            if (class_wrap_binr_srch.glow >= 0 or class_wrap_binr_srch.glow <= len(self.arr) - 1) or (class_wrap_binr_srch.gupp >= 0 or class_wrap_binr_srch.gupp <= len(self.arr) - 1):
                #print(f"start-glow={class_wrap_binr_srch.glow} (gupp)={class_wrap_binr_srch.gupp} arr[glow]={arr[class_wrap_binr_srch.glow]} arr[gupp-1]={arr[class_wrap_binr_srch.gupp - 1]}")
                print(f"start-glow={class_wrap_binr_srch.glow} (gupp)={class_wrap_binr_srch.gupp} arr[glow]={arr[class_wrap_binr_srch.glow]} arr[gupp-1]={arr[class_wrap_binr_srch.gupp - 2]}")
            else:
                print(f"start-glow={class_wrap_binr_srch.glow} gupp={class_wrap_binr_srch.gupp} arr[glow]=xxxx arr[gupp-1]=xxxx")

            while class_wrap_binr_srch.glow >= 0 or class_wrap_binr_srch.gupp < len(self.arr):
                class_wrap_binr_srch.cnt = class_wrap_binr_srch.cnt + 1

                if (class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) % 2 == 1:
                    self.mid0 = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2)
                    self.imid0 = class_wrap_binr_srch.glow + self.mid0

                    if abs(self.upp - self.low) == 2 and (self.arr[self.imid0] != self.srch) or ((self.upp == self.low) and (self.arr[self.imid0] != self.srch)):
                        print(f"mid0=srch-0::srch: {self.srch} not in {self.arr}")
                        break
                    if (self.upp == (self.low + 1)) and (self.arr[self.imid0] != self.srch):
                        print(f"mid0=srch-0::srch: {self.srch} not in {self.arr}")
                        break

                    if self.arr[self.imid0] == self.srch:
                        print(f"got {self.srch} : 1 at {self.mid0}")
                        class_wrap_binr_srch.print_vals("mid0=srch-00", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        break
                    elif self.arr[self.imid0] < self.srch:
                        class_wrap_binr_srch.print_vals(self,"srch>mid0-A", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow + self.mid0
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        if self.upp - self.low == 2:
                            if self.arr[int((self.upp + self.low) / 2)] == self.srch:
                                print(f"got {self.srch} AA: at {int((self.upp + self.low) / 2)}")
                                break
                            else:
                                print(f"srch={self.srch} is not in {self.arr}")
                                break
                        class_wrap_binr_srch.print_vals(self,"srch>mid0-B", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.binr_srch(self, self.srch, self.low, self.upp, self.arr)
                    else:
                        class_wrap_binr_srch.print_vals(self,"mid0<srch-C", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp - self.mid0 - 0
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"mid0<srch-D", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.binr_srch(self,self.srch, self.low, self.upp, self.arr)
                else:
                    self.midl = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2) - 1
                    self.midr = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2)
                    print(f"midl={self.midl} midr={self.midr}")
                    self.imidl = class_wrap_binr_srch.glow + self.midl
                    self.imidr = class_wrap_binr_srch.glow + self.midr
                    if abs(self.upp - self.low) == 2 and (self.arr[self.imidl] != self.srch and self.arr[self.imidr] != self.srch):
                        print(f"midl&r =srch-0A::srch: {self.srch} not in {self.arr}")
                        break
                    if (self.arr[self.imidl] != self.srch or self.arr[self.imidr] != self.srch) and ((self.upp == (self.low + 1))):
                        print(f"midl&r =srch-0B::srch: {self.srch} not in {self.arr}")
                        break

                    if (self.srch == self.arr[self.imidl]) or self.srch == self.arr[self.imidr]:
                        if self.srch == arr[self.imidl]:
                            print(f"got {self.srch} at: {self.imidl}")
                            class_wrap_binr_srch.print_vals(self,"midl&r =srch-00", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, arr[self.imidl], self.imidr,
                                       self.arr[self.imidr], self.arr)
                            break
                        elif self.srch == self.arr[self.imidr]:
                            print(f"got {self.srch} at:  {self.imidr}")
                            class_wrap_binr_srch.print_vals(self,"midl&r =srch-00", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, arr[self.imidl], self.imidr,
                                       self.arr[self.imidr], self.arr)
                            break
                    elif self.srch > self.arr[self.imidr]:
                        class_wrap_binr_srch.print_vals(self,"srch>midr-A", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)

                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow + self.midr + 0
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"srch>midr-B", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)
                        class_wrap_binr_srch.binr_srch(self,self.srch, self.low, self.upp, self.arr)
                    else:
                        class_wrap_binr_srch.print_vals(self,"midl<srch-C", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)
                        print(f"(abs(upp - low):{abs(self.upp - self.low)} arr[imidl]={self.arr[self.imidl]} self.arr[imidr]={self.arr[self.imidr]}")
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp - self.midl - 0
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"midl<srch-D", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)
                        class_wrap_binr_srch.binr_srch(self,self.srch, self.low, self.upp, self.arr)
                if class_wrap_binr_srch.gupp < class_wrap_binr_srch.glow:
                    print("get out")
                    break

        #binr_srch(srch, inter_low, inter_upp, arr)


srch = 11
#arr = [5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27, 28]
arr = [5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27,28]
low=0
upp=len(arr)
a=class_wrap_binr_srch(srch, arr)
a.gupp=upp
print(a.low, a.upp,a.gupp,a.arr,)
a.binr_srch(srch, low, upp, arr)

  ========================================above is correct OOPS  - sep var/param in func ====================================


  ========================================below is correct OOPS with all init variables====================================

class class_wrap_binr_srch:
        glow=0
        cnt=1
        gupp = 0

        def __init__(self,srch,arr):
            self.srch=srch
            self.arr=arr
            self.low=0
            self.upp=len(self.arr)
            self.inter_low = 0
            self.inter_upp = len(self.arr)
            class_wrap_binr_srch.gupp =len(arr)
            self.mid0=0
            self.amid0=0
            self.midl=0
            self.amidl=0
            self.midr=0
            self.amidr=0

        def print_vals(self,tag, cnt, srch, low, upp, mid0, amid0, midl, amidl, midr, amidr, arr):
            print(f"low={self.low} , upp={self.upp}")
            print(f"deb-{tag}:cnt={cnt}: srch={self.srch}, low={self.low},upp={self.upp},mid0={self.mid0}, midl={self.midl}, midr={self.midr}, len(arr)={len(self.arr)} arr={self.arr}")
            if (self.low < 0 or self.low >= len(self.arr) + 1) or (self.upp < 0 or self.upp >= len(self.arr) + 1):
                print(f"deb-if: srch={self.srch}, arr[low]=xxxx,arr[upp-1]=xxx,,arr[mid0] ={self.amid0}, arr[midl]={self.amidl}, arr[mid2]={self.amidr}\n")
            else:
                print(f"deb-else: srch={self.srch}, arr[low]={arr[self.low]},arr[upp-1]= {self.arr[self.upp - 1]},arr[mid0] ={self.amid0}, arr[midl]={self.amidl}, arr[midr]={self.amidr}\n")

        def binr_srch(self,srch, low, upp, arr):
            print(" ===================================================================")
            print(f"class_wrap_binr_srch.glow= {class_wrap_binr_srch.glow} class_wrap_binr_srch.gupp = {class_wrap_binr_srch.gupp} cnt={class_wrap_binr_srch.cnt}")
            if (class_wrap_binr_srch.glow >= 0 or class_wrap_binr_srch.glow <= len(self.arr) - 1) or (class_wrap_binr_srch.gupp >= 0 or class_wrap_binr_srch.gupp <= len(self.arr) - 1):
                #print(f"start-glow={class_wrap_binr_srch.glow} (gupp)={class_wrap_binr_srch.gupp} arr[glow]={arr[class_wrap_binr_srch.glow]} arr[gupp-1]={arr[class_wrap_binr_srch.gupp - 1]}")
                print(f"start-glow={class_wrap_binr_srch.glow} (gupp)={class_wrap_binr_srch.gupp} arr[glow]={arr[class_wrap_binr_srch.glow]} arr[gupp-1]={arr[class_wrap_binr_srch.gupp - 2]}")
            else:
                print(f"start-glow={class_wrap_binr_srch.glow} gupp={class_wrap_binr_srch.gupp} arr[glow]=xxxx arr[gupp-1]=xxxx")

            while class_wrap_binr_srch.glow >= 0 or class_wrap_binr_srch.gupp < len(self.arr):
                class_wrap_binr_srch.cnt = class_wrap_binr_srch.cnt + 1

                if (class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) % 2 == 1:
                    self.mid0 = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2)
                    self.imid0 = class_wrap_binr_srch.glow + self.mid0

                    if abs(self.upp - self.low) == 2 and (self.arr[self.imid0] != self.srch) or ((self.upp == self.low) and (self.arr[self.imid0] != self.srch)):
                        print(f"mid0=srch-0::srch: {self.srch} not in {self.arr}")
                        break
                    if (self.upp == (self.low + 1)) and (self.arr[self.imid0] != self.srch):
                        print(f"mid0=srch-0::srch: {self.srch} not in {self.arr}")
                        break

                    if self.arr[self.imid0] == self.srch:
                        print(f"got {self.srch} : 1 at {self.mid0}")
                        class_wrap_binr_srch.print_vals("mid0=srch-00", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        break
                    elif self.arr[self.imid0] < self.srch:
                        class_wrap_binr_srch.print_vals(self,"srch>mid0-A", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow + self.mid0
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        if self.upp - self.low == 2:
                            if self.arr[int((self.upp + self.low) / 2)] == self.srch:
                                print(f"got {self.srch} AA: at {int((self.upp + self.low) / 2)}")
                                break
                            else:
                                print(f"srch={self.srch} is not in {self.arr}")
                                break
                        class_wrap_binr_srch.print_vals(self,"srch>mid0-B", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.binr_srch(self, self.srch, self.low, self.upp, self.arr)
                    else:
                        class_wrap_binr_srch.print_vals(self,"mid0<srch-C", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp - self.mid0 - 0
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"mid0<srch-D", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, self.imid0, arr[self.imid0], 999, 999, 999, 999, self.arr)
                        class_wrap_binr_srch.binr_srch(self,self.srch, self.low, self.upp, self.arr)
                else:
                    self.midl = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2) - 1
                    self.midr = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2)
                    print(f"midl={self.midl} midr={self.midr}")
                    self.imidl = class_wrap_binr_srch.glow + self.midl
                    self.imidr = class_wrap_binr_srch.glow + self.midr
                    if abs(self.upp - self.low) == 2 and (self.arr[self.imidl] != self.srch and self.arr[self.imidr] != self.srch):
                        print(f"midl&r =srch-0A::srch: {self.srch} not in {self.arr}")
                        break
                    if (self.arr[self.imidl] != self.srch or self.arr[self.imidr] != self.srch) and ((self.upp == (self.low + 1))):
                        print(f"midl&r =srch-0B::srch: {self.srch} not in {self.arr}")
                        break

                    if (self.srch == self.arr[self.imidl]) or self.srch == self.arr[self.imidr]:
                        if self.srch == arr[self.imidl]:
                            print(f"got {self.srch} at: {self.imidl}")
                            class_wrap_binr_srch.print_vals(self,"midl&r =srch-00", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, arr[self.imidl], self.imidr,
                                       self.arr[self.imidr], self.arr)
                            break
                        elif self.srch == self.arr[self.imidr]:
                            print(f"got {self.srch} at:  {self.imidr}")
                            class_wrap_binr_srch.print_vals(self,"midl&r =srch-00", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, arr[self.imidl], self.imidr,
                                       self.arr[self.imidr], self.arr)
                            break
                    elif self.srch > self.arr[self.imidr]:
                        class_wrap_binr_srch.print_vals(self,"srch>midr-A", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)

                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow + self.midr + 0
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"srch>midr-B", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)
                        class_wrap_binr_srch.binr_srch(self,self.srch, self.low, self.upp, self.arr)
                    else:
                        class_wrap_binr_srch.print_vals(self,"midl<srch-C", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)
                        print(f"(abs(upp - low):{abs(self.upp - self.low)} arr[imidl]={self.arr[self.imidl]} self.arr[imidr]={self.arr[self.imidr]}")
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp - self.midl - 0
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow
                        self.low = class_wrap_binr_srch.glow
                        self.upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"midl<srch-D", class_wrap_binr_srch.cnt, self.srch, self.low, self.upp, 999, 999, self.imidl, self.arr[self.imidl], self.imidr, self.arr[self.imidr], self.arr)
                        class_wrap_binr_srch.binr_srch(self,self.srch, self.low, self.upp, self.arr)
                if class_wrap_binr_srch.gupp < class_wrap_binr_srch.glow:
                    print("get out")
                    break

        #binr_srch(srch, inter_low, inter_upp, arr)


srch = 4
#arr = [5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27, 28]
arr = [5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27,28]
low=0
upp=len(arr)
a=class_wrap_binr_srch(srch, arr)
a.gupp=upp
print(a.low, a.upp,a.gupp,a.arr,)
a.binr_srch(srch, low, upp, arr)

  ========================================above  is correct OOPS with all init variables ====================================

  ========================================Final Below is correct OOPS with only reqd init variables and remove self  ====================================
class class_wrap_binr_srch:
        glow=0
        cnt=1
        gupp = 0

        def __init__(self,srch,arr):
            self.srch=srch
            self.arr=arr
            self.low=0
            self.upp=len(self.arr)
            #self.inter_low = 0
            #self.inter_upp = len(self.arr)
            class_wrap_binr_srch.gupp =len(arr)

        def print_vals(self,tag, cnt, srch, low, upp, mid0, amid0, midl, amidl, midr, amidr, arr):
            print(f"low={low} , upp={(upp)-1}")
            print(f"deb-{tag}:cnt={cnt}: srch={srch}, low={low},upp={upp},mid0={mid0}, midl={midl}, midr={midr}, len(arr)={len(arr)} arr={arr}")
            if (low < 0 or  low >= len( arr) + 1) or ( upp < 0 or  upp >= len( arr) + 1):
                print(f"deb-if: srch={ srch}, arr[low]=xxxx,arr[upp-1]=xxx,,arr[mid0] ={amid0}, arr[midl]={amidl}, arr[mid2]={amidr}\n")
            else:
                print(f"deb-else: srch={ srch}, arr[low]={arr[ low]},arr[upp-1]= { arr[ upp - 1]},arr[mid0] ={amid0}, arr[midl]={amidl}, arr[midr]={amidr}\n")

        def binr_srch(self,srch, low, upp, arr):
            print(" ===================================================================")
            print(f"class_wrap_binr_srch.glow= {class_wrap_binr_srch.glow} class_wrap_binr_srch.gupp = {class_wrap_binr_srch.gupp} cnt={class_wrap_binr_srch.cnt}")
            if (class_wrap_binr_srch.glow >= 0 or class_wrap_binr_srch.glow <= len(arr) - 1) or (class_wrap_binr_srch.gupp >= 0 or class_wrap_binr_srch.gupp <= len(self.arr) - 1):
                #print(f"start-glow={class_wrap_binr_srch.glow} (gupp)={class_wrap_binr_srch.gupp} arr[glow]={arr[class_wrap_binr_srch.glow]} arr[gupp-1]={arr[class_wrap_binr_srch.gupp - 1]}")
                print(f"start-glow={class_wrap_binr_srch.glow} (gupp)={class_wrap_binr_srch.gupp} arr[glow]={arr[class_wrap_binr_srch.glow]} arr[gupp-1]={arr[class_wrap_binr_srch.gupp - 2]}")
            else:
                print(f"start-glow={class_wrap_binr_srch.glow} gupp={class_wrap_binr_srch.gupp} arr[glow]=xxxx arr[gupp-1]=xxxx")

            while class_wrap_binr_srch.glow >= 0 or class_wrap_binr_srch.gupp < len(arr):
                class_wrap_binr_srch.cnt = class_wrap_binr_srch.cnt + 1

                if (class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) % 2 == 1:
                    mid0 = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2)
                    imid0 = class_wrap_binr_srch.glow + mid0

                    if abs(upp - low) == 2 and (arr[imid0] != srch) or ((upp == low) and (arr[imid0] != srch)):
                        print(f"mid0=srch-0::srch: {srch} not in {arr}")
                        break
                    if (upp == (low + 1)) and (arr[imid0] != srch):
                        print(f"mid0=srch-0::srch: {srch} not in {arr}")
                        break

                    if arr[imid0] == srch:
                        print(f"got {srch} : 1 at {0}")
                        class_wrap_binr_srch.print_vals("mid0=srch-00", class_wrap_binr_srch.cnt, srch, low, upp, imid0, arr[imid0], 999, 999, 999, 999, arr)
                        break
                    elif arr[imid0] < srch:
                        class_wrap_binr_srch.print_vals(self,"srch>mid0-A", class_wrap_binr_srch.cnt, srch, low, upp, imid0, arr[imid0], 999, 999, 999, 999, arr)
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow + mid0
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp
                        low = class_wrap_binr_srch.glow
                        upp = class_wrap_binr_srch.gupp
                        if upp - low == 2:
                            if arr[int((upp + low) / 2)] == srch:
                                print(f"got {srch} AA: at {int((upp + low) / 2)}")
                                break
                            else:
                                print(f"srch={srch} is not in {arr}")
                                break
                        class_wrap_binr_srch.print_vals(self,"srch>mid0-B", class_wrap_binr_srch.cnt, srch, low, upp, imid0, arr[imid0], 999, 999, 999, 999, arr)
                        class_wrap_binr_srch.binr_srch(self, srch, low, upp, arr)
                    else:
                        class_wrap_binr_srch.print_vals(self,"mid0<srch-C", class_wrap_binr_srch.cnt, srch, low, upp, imid0, arr[imid0], 999, 999, 999, 999, arr)
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp - mid0 - 0
                        low = class_wrap_binr_srch.glow
                        upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"mid0<srch-D", class_wrap_binr_srch.cnt, srch, low, upp, imid0, arr[imid0], 999, 999, 999, 999, arr)
                        class_wrap_binr_srch.binr_srch(self,srch, low, upp, arr)
                else:
                    midl = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2) - 1
                    midr = int((class_wrap_binr_srch.gupp - class_wrap_binr_srch.glow) / 2)
                    print(f"midl={midl} midr={midr}")
                    imidl = class_wrap_binr_srch.glow + midl
                    imidr = class_wrap_binr_srch.glow + midr
                    if abs(upp - low) == 2 and (arr[imidl] != srch and arr[imidr] != srch):
                        print(f"midl&r =srch-0A::srch: {srch} not in {arr}")
                        break
                    if (arr[imidl] != srch or arr[imidr] != srch) and ((upp == (low + 1))):
                        print(f"midl&r =srch-0B::srch: {srch} not in {arr}")
                        break

                    if (srch == arr[imidl]) or srch == arr[imidr]:
                        if srch == arr[imidl]:
                            print(f"got {srch} at: {imidl}")
                            class_wrap_binr_srch.print_vals(self,"midl&r =srch-00", class_wrap_binr_srch.cnt, srch, low, upp, 999, 999, imidl, arr[imidl], imidr,
                                       arr[imidr], arr)
                            break
                        elif srch == arr[imidr]:
                            print(f"got {srch} at:  {imidr}")
                            class_wrap_binr_srch.print_vals(self,"midl&r =srch-00", class_wrap_binr_srch.cnt, srch, low, upp, 999, 999, imidl, arr[imidl], imidr,
                                       arr[imidr], arr)
                            break
                    elif srch > arr[imidr]:
                        class_wrap_binr_srch.print_vals(self,"srch>midr-A", class_wrap_binr_srch.cnt, srch, low, upp, 999, 999, imidl, arr[imidl], imidr, arr[imidr], arr)

                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow + midr + 0
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp
                        low = class_wrap_binr_srch.glow
                        upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"srch>midr-B", class_wrap_binr_srch.cnt, srch, low, upp, 999, 999, imidl, arr[imidl], imidr, arr[imidr], arr)
                        class_wrap_binr_srch.binr_srch(self,srch, low, upp, arr)
                    else:
                        class_wrap_binr_srch.print_vals(self,"midl<srch-C", class_wrap_binr_srch.cnt,srch, low, upp, 999, 999, imidl, arr[imidl], imidr, arr[imidr], arr)
                        print(f"(abs(upp - low):{abs(upp - low)} arr[imidl]={arr[imidl]} arr[imidr]={arr[imidr]}")
                        class_wrap_binr_srch.gupp = class_wrap_binr_srch.gupp - midl - 0
                        class_wrap_binr_srch.glow = class_wrap_binr_srch.glow
                        low = class_wrap_binr_srch.glow
                        upp = class_wrap_binr_srch.gupp
                        class_wrap_binr_srch.print_vals(self,"midl<srch-D", class_wrap_binr_srch.cnt, srch, low, upp, 999, 999, imidl, arr[imidl], imidr, arr[imidr], arr)
                        class_wrap_binr_srch.binr_srch(self,srch, low, upp, arr)
                if class_wrap_binr_srch.gupp < class_wrap_binr_srch.glow:
                    print("get out")
                    break

        #binr_srch(srch, inter_low, inter_upp, arr)


srch = 11
#arr = [5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27, 28]
arr = [5, 7, 9, 11, 13, 14, 16, 18, 20, 22, 23, 25, 27,28]
low=0
upp=len(arr)
a=class_wrap_binr_srch(srch, arr)
a.gupp=upp
print(a.low, a.upp,a.gupp,a.arr,)
a.binr_srch(srch, low, upp, arr)
  ========================================Final above  is correct OOPS with only reqd init variables and remove self  ====================================

  ============================================below wrong approach without global var ..  ignore===================================


cnt=0
def fn_prnt(tag,cnt, low,upp,lnth,srch,arr):
    #print(f"{tag}-cnt= {cnt},low={low}, upp={upp}, lnth={lnth}, srch={srch}, arr={arr} ")
    #print(f"{tag}-low={low}, upp={upp}, lnth={lnth}, arr[low]={arr[low]},  arr[upp]={arr[upp]}, srch={srch}, arr={arr} ")
    print(f"{tag}-cnt= {cnt},low={low}, upp={upp}, lnth={lnth}, arr[low]={arr[low]},  arr[upp-low-1]={arr[upp-1]}, srch={srch}, arr={arr} ")
    #print(f"{tag}-cnt= {cnt},low={low}, upp={upp}, lnth={lnth},  arr[upp-low-1]={arr[upp -low- 1]}, srch={srch}, arr={arr} ")

def bn_src_arry(low,upp,lnth):
    lnth_act=upp-low+1
    global cnt
    fn_prnt("AO",cnt, low, upp, lnth, srch, arr)
    #while lnth != 1:
    while (upp-low) > 2:
    #while  cnt <= 10:
        fn_prnt("AO000-break", cnt, low, upp, lnth, srch, arr)
        if lnth <= 1 or (low == upp):
        #if cnt >= 10 or lnth <= 1 or (low==upp):
            fn_prnt("AO0-break", cnt, low, upp, lnth, srch, arr)
            break
        cnt=cnt+1
        if lnth_act%2 != 0:
            mid0=(int((upp-low)/2))
            print(f"plc: {(int(lnth/2))} -- arr[(int(lnth/2))]={arr[(int(lnth/2))]}")
            #fn_prnt("A1", cnt,low, upp, lnth, srch, arr)
            #fn_prnt("A2", cnt, int(lnth/2), upp, lnth, srch, arr)
            if arr[mid0]==srch:
                print(f"Got it-1: {srch}:: at pos:{low}{upp}")
                fn_prnt("B",cnt, low, upp, lnth, srch, arr)
                break
            else:
                if srch > arr[mid0]:
                    fn_prnt("C", cnt,low, upp, lnth, srch, arr)
                    low=low+(mid0)
                    upp=upp
                    lnth = upp - low+1
                    bn_src_arry(low, upp,lnth)
                elif arr[(int((upp-low)/2))] > srch:
                    fn_prnt("D", cnt,low, upp, lnth, srch, arr)
                    #low = low
                    low=0
                    upp = upp - (int((upp-low) / 2))
                    lnth = upp - low+1
                    bn_src_arry(low, upp,lnth)
                else:
                    fn_prnt("xxx", cnt, low, upp, lnth, srch, arr)
        else:
            pos1=(int((upp-low)/2))
            pos2= (int((upp-low)/2)+1)
            print(f"arr[pos1]={arr[pos1]}")
            print(f"arr[pos2]={arr[pos2]}")
            #fn_prnt("E00-A", cnt,pos1, upp, lnth, srch, arr)
            #fn_prnt("E00-B", cnt, low, upp, lnth, srch, arr)
            if arr[(pos1)]==srch or arr[(pos2)] ==srch:
                fn_prnt("E1A", cnt,low, (pos1), lnth, srch, arr)
                fn_prnt("E1B", cnt, (pos2), upp, lnth, srch, arr)
                print(f"Got it-2: {srch}:: at pos:{low}{upp}")
                break
            else:
                if srch > arr[(pos2)]:
                    fn_prnt("F", cnt,low, upp, lnth, srch, arr)
                    #low = low + (int(lnth/2)+1)
                    low = low + (pos2)
                    upp = upp
                    lnth = upp - low+1
                    bn_src_arry(low, upp,lnth)
                elif arr[pos1] > srch:
                    fn_prnt("G", cnt,low, upp, lnth, srch, arr)
                    #low = low
                    low=0
                    upp = upp - (pos1)
                    lnth = upp - low+1
                    bn_src_arry(low, upp,lnth)
                else:
                    #print("equal-nothing-2")
                    fn_prnt("yyy", cnt, low, upp, lnth, srch, arr)



srch=9
arr=[5, 6, 7, 8, 9, 56, 59,83,87,89,91]
##srch=56
##arr=[5, 6, 7, 8, 9, 56, 59,83,87,89,91]
low=0
upp=len(arr)
lnth=upp-low+1
print(f"low={low} upp={upp} :: {arr[low]} : {arr[upp-1]}:: len={len(arr)} ::{arr}")
bn_src_arry(low, upp,lnth)

  ============================================above wrong approach without global var . ignore===================================

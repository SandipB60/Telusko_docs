Python - public, private and protected variables, data mangling, 
Private Variables in Python

Prtacted: single underscore(_)
Private: double underscore(__)

Python - public, private and protected
https://www.tutorialsteacher.com/python/private-and-protected-access-modifiers-in-python

Private members of a class are denied access from the environment outside the class. They can be handled only from within the class.
Public members (generally methods declared in a class) are accessible from outside the class. The object of the same class is required to invoke a public method. This arrangement of private instance variables and public methods ensures the principle of data encapsulation.

Protected members of a class are accessible from within the class and are also available to its sub-classes. No other environment is permitted access to it. This enables specific resources of the parent class to be inherited by the child class.

Python doesn't have any mechanism that effectively restricts access to any instance variable or method. Python prescribes a convention of prefixing the name of the variable/method with single or double underscore to emulate the behaviour of protected and private access specifiers.

All members in a Python class are public by default. Any member can be accessed from outside the class environment.

Python performs name mangling of private variables. Every member with double underscore will be changed to _object._class__variable. If so required, it can still be accessed from outside the class, but the practice should be refrained.
 +++++++++++++++++++++++++++++++++++++

Private Variables in Python
https://www.tutorialspoint.com/private-variables-in-python

Private: first time obj.__var accessed, it does not execute...update obj.__var, it executes (???????????????)

The technique of making a variable or method private is called data mangling.
Any identifier of the form __spam (at least two leading underscores, at most one trailing underscore) is textually replaced with _classname__spam, where classname is the current class name with a leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.

  ++++++++++++++++++++++++++++++++++++++++++
class employee:
    def __init__(self, name, roleno, sal,air,cgpa, perchike):
        self.name=name
        self.roleno=roleno
        self._air=air
        self._cgpa=cgpa
        self.__sal=sal
        self.__perchike=perchike

x=employee("Sandip", 1,138,6.23,1000,10.50)
#print(f"self.name={x.name} self.roleno={x.roleno} Sal={x._sal} Perchike={x._perchike} air={x.__air} cgpa={x.__cgpa}")
print(f"self.name={x.name} self.roleno={x.roleno} ")
print(f"air={x._air} cgpa={x._cgpa}")
#print(f"Sal={x._sal} Perchike={x._perchike} ")##Does not execute
x.roleno=5
x._air=13
x._cgpa=8.71
x.__sal=500
x.__perchike=10
print(f"self.name={x.name} self.roleno={x.roleno} ")
print(f"air={x._air} cgpa={x._cgpa}")
#print(f"Sal={x._sal} Perchike={x._perchike} ")##Does not execute
 ----------------------------------------
self.name=Sandip self.roleno=1 
air=6.23 cgpa=1000
self.name=Sandip self.roleno=5 
air=13 cgpa=8.71
  ++++++++++++++++++++++++++++++++++++++++

class employee:
    def __init__(self, name, roleno, sal,air,cgpa, perchike):
        self.name=name     ########################Public
        self.roleno=roleno ########################Public
        self._air=air      ########################Protected
        self._cgpa=cgpa    ########################Protected
        self.__sal=sal     ########################Private
        self.__perchike=perchike  ########################Private

x=employee("Sandip", 1,138,6.23,1000,10.50)
#print(f"self.name={x.name} self.roleno={x.roleno} Sal={x.__sal} Perchike={x.__perchike} air={x._air} cgpa={x._cgpa}")
print(f"self.name={x.name} self.roleno={x.roleno} ")
print(f"x._air={x._air} x._cgpa={x._cgpa}")
#print(f"Sal={x.__sal} Perchike={x.__perchike} ")###############Does not execute
x.roleno=5
x._air=13
x._cgpa=8.71
x.__sal=500
x.__perchike=10
print(f"self.name={x.name} self.roleno={x.roleno} ")
print(f"x._air={x._air} x._cgpa={x._cgpa}")
print(f"x.__sal={x.__sal} x.__perchike={x.__perchike} ")##Does  execute

  -------------------------
self.name=Sandip self.roleno=1 
x._air=6.23 x._cgpa=1000
self.name=Sandip self.roleno=5 
x._air=13 x._cgpa=8.71
x.__sal=500 x.__perchike=10 
 ++++++++++++++++++++++++++++++++++++++

class employee:
    def __init__(self, name, sal):
        self.__name=name  # private attribute
        self.__salary=sal # private attribute

e1=employee("Bill",10000)
print(f"e1.__name: {e1.__name}  ")
print(f"e1.__salary: {e1.__salary}  ")
 _________________________
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/gen.py", line 7, in <module>
    print(f"e1.__name: {e1.__name}  ")
AttributeError: 'employee' object has no attribute '__name
 ++++++++++++++++++++++++++++++++
class employee:
    def __init__(self, name, sal):
        self.__name=name  # private attribute
        self.__salary=sal # private attribute

e1=employee("Bill",10000)
print(" -----1-----------")
print(f"e1.__name: {e1.__name}  ")
print(f"e1.__salary: {e1.__salary}  ")
print(" -----2-----------")
e1.__name="sandip"
e1.__salary=1000.90
print(f"e1.__name: {e1.__name}  ")
print(f"e1.__salary: {e1.__salary}  ")
print(" ------end----------")
  ---------------------------
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/gen.py", line 8, in <module>
    print(f"e1.__name: {e1.__name}  ")
AttributeError: 'employee' object has no attribute '__name'
  +++++++++++++++++++++++++++++++
class employee:
    def __init__(self, name, sal):
        self.__name=name  # private attribute
        self.__salary=sal # private attribute

e1=employee("Bill",10000)
print(" -----1-----------")
#print(f"e1.__name: {e1.__name}  ")
#print(f"e1.__salary: {e1.__salary}  ")
print(" -----2-----------")
e1.__name="sandip"
e1.__salary=1000.90
print(f"e1.__name: {e1.__name}  ")
print(f"e1.__salary: {e1.__salary}  ")
print(" ------end----------")
  -----------------------------
 -----1-----------
 -----2-----------
e1.__name: sandip  
e1.__salary: 1000.9  
 ------end----------
  ++++++++++++++++++++++++++++++

class myClass:
    __privateVar=27
    def __privMeth(self):
        print(f"I am inside class")
    def hello(self):
        print(f"Private Variable value __privateVar: {myClass.__privateVar}")
        print(f"Private Meth __privMeth: {myClass.__privMeth(self)}")

x=myClass()
print(f" --------0--------")
x.hello()
print(f" --------1--------")
x.__privMeth()
print(f" --------End--------")
  ---------------------------------------
    x.__privMeth()
AttributeError: 'myClass' object has no attribute '__privMeth'
 --------0--------
Private Variable value __privateVar: 27
I am inside class
Private Meth __privMeth: None
 --------1--------
  +++++++++++++++++++++++++++++++++++++
class myClass:
    __privateVar=27
    def __privMeth(self):
        print(f"I am inside class")
        return "return __privMeth, sandip"
    def hello(self):
        print(f"Private Variable value __privateVar: {myClass.__privateVar}")
        #myClass.__privMeth(self)
        print(f"Private Meth __privMeth: {myClass.__privMeth(self)}")

x=myClass()
print(f"--------0--------")
x.hello()
print(f"--------1--------")
print(f" __privateVar: { x.__privateVar}")
print(f"--------2--------")
x.__privMeth()
print(f"--------End--------")
 -----------------------------
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/test001.py", line 15, in <module>
    print(f" __privateVar: { x.__privateVar}")
AttributeError: 'myClass' object has no attribute '__privateVar'
--------0--------
Private Variable value __privateVar: 27
I am inside class
Private Meth __privMeth: return __privMeth, sandip
--------1--------
  +++++++++++++++++++++++++++++++++++++++++++
class myClass:
    __privateVar=27
    def __privMeth(self):
        print(f"I am inside class")
        return "return __privMeth, sandip"
    def hello(self):
        print(f"Private Variable value __privateVar: {myClass.__privateVar}")
        #myClass.__privMeth(self)
        print(f"Private Meth __privMeth: {myClass.__privMeth(self)}")

x=myClass()
print(f"--------0--------")
x.hello()
print(f"--------1--------")
x.__privateVar=9999
print(f" __privateVar: { x.__privateVar}")
print(f"--------2--------")
x.__privMeth()
print(f"--------End--------")

  -------------------------
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/test001.py", line 18, in <module>
    x.__privMeth()
AttributeError: 'myClass' object has no attribute '__privMeth'
--------0--------
Private Variable value __privateVar: 27
I am inside class
Private Meth __privMeth: return __privMeth, sandip
--------1--------
 __privateVar: 9999
--------2--------
  +++++++++++++++++++++++++++++++++++
class myClass:
    __privateVar=27
    def __privMeth(self):
        print(f"I am inside class")
        return "return __privMeth, sandip"
    def hello(self):
        print(f"Private Variable value __privateVar: {myClass.__privateVar}")
        #myClass.__privMeth(self)
        print(f"Private Meth __privMeth: {myClass.__privMeth(self)}")

x=myClass()
print(f"--------0--------")
x.hello()
print(f"--------1--------")
x.__privateVar=9999
print(f" __privateVar: { x.__privateVar}")
print(f" _myClass__privateVar: { x._myClass__privateVar}")
print(f"--------2--------")
x._myClass__privMeth()
print(f"--------3--------")
x.__privMeth()
print(f"--------End--------")
  ---------------------------------
Traceback (most recent call last):
  File "D:/Sandip/Study/Python/Python_oops/Telusko/code_to_exec/test001.py", line 21, in <module>
    x.__privMeth()
AttributeError: 'myClass' object has no attribute '__privMeth'
--------0--------
Private Variable value __privateVar: 27
I am inside class
Private Meth __privMeth: return __privMeth, sandip
--------1--------
 __privateVar: 9999
 _myClass__privateVar: 27
--------2--------
I am inside class
--------3--------
  +++++++++++++++++++++++++++++++++++++++
Private & Protected variables

 ++++++++++++++++++++++++++++++++++++++++++++
https://docs.python.org/3/tutorial/classes.html

class Mapping:
    def __init__(self, iterable):
        self.item_list=[]
        self.__update(iterable)
    def update(self,iterable):
        for item in iterable:
            self.item_list.append()
    __update=update()

class Mappingsubclass(Mapping):

    def update(self,keys,values):
        for item in zip(keys, values):
            self.item_list.append(item)

x=Mappingsubclass()
print(f"__update={x.__update}")
 ++++++++++++++++++++++++++++++++++++++++++++

 

 


